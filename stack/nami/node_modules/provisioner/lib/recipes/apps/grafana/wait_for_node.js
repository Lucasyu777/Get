/// <reference path="../../../../typings-recipe.d.ts" />
/*
 * Wait for Grafana node to be ready
 * This avoids issues where database migrations are executed in two nodes at once, causing one of them to fail
 */
"use strict";
(() => {
    const grafanaPort = 3000;
    /**
     * Returns hostname of grafana node 0
     */
    function getNodeZero() {
        return provisioner.peerNodenames[0];
    }
    /**
     * Returns true when the node is not node 0
     */
    async function isNotNodeZero() {
        const nodeZero = getNodeZero();
        const addresses = [
            await cloud.getMetaData("public-ipv4"),
            await cloud.getMetaData("private-ipv4"),
            provisioner.peerNodename
        ];
        logger.debug(`Checking if the initial node '${nodeZero}' is not part of '${addresses}'`);
        // If none of the addresses were found in seeds, this node is not a seed
        if (addresses.indexOf(nodeZero) < 0) {
            logger.debug(`This is not the initial node`);
            return true;
        }
        else {
            logger.debug(`This is the initial node, skipping wait`);
            return false;
        }
    }
    recipes.register({
        id: "grafana-wait-for-node",
        on: {
            beforeInitialize: {
                depends: ["wait-for-dns"]
            }
        },
        conditions: {
            tierModules: { any: ["grafana"] },
            instanceTier: { not: ["main"] },
            shouldInvoke: isNotNodeZero
        },
        recipeHandler: async function (input) {
            const timeout = 5000;
            const retries = 120;
            const nodeZero = getNodeZero();
            logger.debug(`Waiting for port ${grafanaPort} on initial Grafana node ${nodeZero}`);
            const ready = await utils.waitForPort({ host: nodeZero, port: grafanaPort, timeout, retries, logger });
            if (!ready) {
                throw new Error("Unable to wait for initial Grafana node to be ready");
            }
            logger.debug(`Waiting for port ${grafanaPort} on initial Grafana node ${nodeZero} - Finished`);
        }
    });
})();
