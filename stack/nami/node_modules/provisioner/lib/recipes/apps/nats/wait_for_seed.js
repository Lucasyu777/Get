/// <reference path="../../../../typings-recipe.d.ts" />
/*
 * Wait for NATS Seed to be ready
 * https://github.com/nats-io/gnatsd#user-content-clustering
 */
"use strict";
(() => {
    const natsClusteringPort = 6222;
    /**
     * Returns the seed node
     */
    function getSeedNode() {
        return provisioner.peerNodenames[0];
    }
    /**
     * Returns true when the node is not seed
     */
    async function isNotSeed() {
        const addresses = [
            await cloud.getMetaData("public-ipv4"),
            await cloud.getMetaData("private-ipv4"),
            provisioner.peerNodename
        ];
        const seed = getSeedNode();
        logger.debug(`Checking if any of '${addresses}' matches the seed node: ${seed}`);
        return !addresses.includes(seed);
    }
    recipes.register({
        id: "nats-wait-for-seed",
        on: {
            beforeInitialize: {
                depends: ["wait-for-dns"]
            }
        },
        conditions: {
            tierModules: { any: ["nats"] },
            instanceTier: { not: ["main"] },
            shouldInvoke: isNotSeed
        },
        recipeHandler: async function (input) {
            const timeout = 5000;
            const retries = 60;
            const seed = getSeedNode();
            logger.debug(`Waiting for port ${natsClusteringPort} on ${seed}`);
            if (!await utils.waitForPort({ host: seed, port: natsClusteringPort, timeout, retries, logger })) {
                throw new Error("Unable to wait for seed node to be ready");
            }
            logger.debug(`Waiting for port ${natsClusteringPort} on ${seed} - Finished`);
        }
    });
})();
