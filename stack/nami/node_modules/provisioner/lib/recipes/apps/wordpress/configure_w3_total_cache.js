/// <reference path="../../../../typings-recipe.d.ts" />
/*
 * Enable and configure w3-total-cache WordPress plugin to use an external ElastiCache server
 */
"use strict";
recipes.register({
    id: "wordpress-w3-total-cache",
    on: { afterInitialize: {} },
    conditions: {
        tierModules: { all: ["wordpress", "wp-cli"] },
        tierTags: { any: ["requires-elasticache"] },
        platformTags: { any: ["linux"] },
    },
    recipeHandler: async function (input) {
        const pluginName = "w3-total-cache";
        const elasticacheAddress = await cloud.getUserData("PROVISIONER_ELASTICACHE_ADDRESS");
        function runCli(args) {
            return runProgram(path.join(platform.pathInfo.namiAppPath, "wp-cli/bin/wp"), args);
        }
        function isMultisite() {
            return !!fs.readFileSync(path.join(platform.pathInfo.namiAppPath, "wordpress/wp-config.php")).toString().match(/MULTISITE/);
        }
        if (elasticacheAddress === undefined) {
            logger.debug(`Skipping ${pluginName} activation/configuration...`);
        }
        else {
            const wpConfigFile = path.join(platform.pathInfo.namiDataPath, "wordpress/wp-config.php");
            const wpFolder = path.join(platform.pathInfo.namiAppPath, "wordpress");
            // Set permissions required for the plugin installation scripts
            fs.chmodSync(wpConfigFile, "0666");
            fs.chmodSync(wpFolder, "0775");
            runProgram("chown", ["bitnami:daemon", wpFolder]);
            // Activate the plugin
            logger.info(`Activating plugin ${pluginName}...`);
            const activateArgs = ["plugin", "activate", pluginName];
            if (isMultisite())
                activateArgs.push("--network");
            runCli(activateArgs);
            // Choose 'Memcached' as database cache method
            logger.info(`Configuring plugin ${pluginName}...`);
            runCli(["total-cache", "fix_environment"]);
            runCli(["total-cache", "option", "set", "dbcache.engine", "memcached", "--type=string"]);
            runCli(["total-cache", "flush", "all"]);
            // Set the ElastiCache endpoint
            runCli(["total-cache", "option", "set", "dbcache.memcached.servers", elasticacheAddress, "--type=string"]);
            runCli(["total-cache", "flush", "all"]);
            // Copy htaccess rules to proper location
            const rules = fs.readFileSync(path.join(wpFolder, ".htaccess")).toString();
            fs.appendFileSync(path.join(wpFolder, "wordpress-htaccess.conf"), `\n<Directory "${wpFolder}">
${rules}
</Directory>`);
            fs.writeFileSync(path.join(wpFolder, ".htaccess"), `# WARNING! FILE NOT USED BY APACHE, USE "${path.join(wpFolder, "wordpress-htaccess.conf")}" INSTEAD
${rules}
`);
            // Reset permissions to original values
            runProgram("chown", ["bitnami:daemon", path.join(wpFolder, ".htaccess")]);
            fs.chmodSync(path.join(wpFolder, ".htaccess"), "0660");
            fs.chmodSync(wpConfigFile, "0640");
            fs.chmodSync(wpFolder, "0755");
        }
    }
});
