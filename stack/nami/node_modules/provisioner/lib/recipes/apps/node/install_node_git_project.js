/// <reference path="../../../../typings-recipe.d.ts" />
/*
 * Clone node project, run its run script and configure a service
 */
"use strict";
const envFile = "/root/.deployment.env";
const dataFolder = "/bitnami/app";
const appFolder = "/app";
const appScript = path.join(appFolder, "run.sh");
const instanceTier = { any: ["node"] };
const tierModules = { all: ["node", "git"] };
const APP_SERVICE_VERSION = 1;
/**
 * Handler to get environment map
 */
function getEnvironmentMap(provisioner) {
    // Define allowed parameters to be exposed via environment variables
    const envMap = {
        DATA_FOLDER: dataFolder,
        APP_FOLDER: appFolder,
        DATABASE_USER: provisioner.peerUsername || "",
        DATABASE_NAME: provisioner.appDatabase || "",
        DATABASE_PASSWORD: provisioner.peerPassword || "",
        DATABASE_HOST: provisioner.peerAddressHostname || "",
        DATABASE_PORT: provisioner.peerPort || "",
        DATABASE_CONNECTION_OPTIONS: provisioner.peerConnectionOptions || "",
        // TODO: Un-hardcode this
        BACKEND_PORT: 3000,
        PATH: `${platform.getAdditionalSystemPaths().join(":")}:${process.env.PATH}`
    };
    return envMap;
}
recipes.register({
    id: "clone-git-node-project",
    on: { afterInitialize: {} },
    conditions: { tierModules, instanceTier },
    recipeHandler: async function (input) {
        const repo = provisioner.appRepository;
        if (fs.existsSync(appFolder)) {
            throw new Error(`Unable to clone ${repo} in ${appFolder}. The folder already exists.`);
        }
        // Clone repository and execute its run script
        runProgram("/opt/bitnami/git/bin/git", ["clone", repo, appFolder]);
        logger.debug(`Cloning ${repo} into ${appFolder}`);
    }
});
recipes.register({
    id: "save-deployment-env",
    // TODO: use a generic recipe, not the shared one
    on: { beforeInitialize: { depends: ["shared-disk-aws", "shared-disk-azure"] } },
    cloudTags: { any: ["aws", "azure"] },
    conditions: { tierModules, instanceTier, ifChanged: (input) => { return APP_SERVICE_VERSION; } },
    recipeHandler: async function (input) {
        const envMap = getEnvironmentMap(provisioner);
        // Write environment variables
        // NOTE: We expect run.sh to load the env file
        const env = Object.keys(envMap).map((name) => `export ${name}="${envMap[name]}"`).join("\n");
        logger.debug(`Writing environment variables in ${envFile}`);
        fs.writeFileSync(envFile, `#\n# Deployment environment variables\n#\n\n${env}\n`);
        fs.chmodSync(envFile, "0600");
    }
});
recipes.register({
    id: "init-git-node-project",
    on: { afterInitialize: {} },
    conditions: { tierModules, instanceTier },
    recipeHandler: async function (input) {
        const env = getEnvironmentMap(provisioner);
        // Install pm2 globally to handle node processes
        logger.debug("Installing pm2");
        runProgram("npm", ["install", "-g", "pm2"], { env });
        if (!fs.existsSync(appScript)) {
            throw new Error(`Unable to run ${appScript}.` +
                "Please make sure you follow our documentation at https://github.com/bitnami/sample-mean#init-script");
        }
        // Run script with the exposed env
        logger.debug(`Initializing repository: "${appScript} init"`);
        let streams = runProgram(appScript, ["init"], { retrieveStdStreams: true, env });
        logger.debug(`Initialization result: ${JSON.stringify(streams, null, 2)}`);
    }
});
/**
 * This recipe overwrites the "bitnami" init.d script created in "system-services"
 */
recipes.register({
    id: "install-app-service",
    on: { afterInitialize: {} },
    conditions: { tierModules, instanceTier, ifChanged: (input) => { return APP_SERVICE_VERSION; } },
    recipeHandler: async function (input) {
        const service = {
            name: "bitnami",
            description: "Bitnami app bootstrap",
            content: "",
            env: "",
            start: `${appScript} start`,
            stop: `${appScript} stop`,
            restart: `${appScript} restart`
        };
        // Define service
        logger.debug(`Creating ${service.name} service`);
        service.content = `
case "$1" in
  start)
    ${service.start}
    exit $?
    ;;
  stop)
    ${service.stop}
    exit $?
    ;;
  restart|force-reload|reload)
    ${service.restart}
    exit $?
    ;;
esac
`;
        // Install and enable service
        platform.getInitSystem().installService(service.name, service.description, service.content, {});
        platform.getInitSystem().enableService(service.name);
    }
});
