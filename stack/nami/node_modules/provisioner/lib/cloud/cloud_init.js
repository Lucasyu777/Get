"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloudInitCloud = void 0;
const fs = require("fs");
const path = require("path");
const glob = require("glob");
const base_1 = require("./base");
/**
* Logic specific to be run inside machines with cloud-init support
 */
class CloudInitCloud extends base_1.BaseCloud {
    constructor(options) {
        super(options);
        this._metadataFile = "/run/cloud-init/instance-data.json";
        this._userDataFile = "/var/lib/cloud/instance/user-data.txt";
    }
    /**
     * Metadata of the instance such as: "instance-id" or "local-hostname"
     * https://cloudinit.readthedocs.io/en/latest/topics/instancedata.html#format-of-instance-data-json
     */
    getInstanceMetadata(key) {
        if (fs.existsSync(this._metadataFile)) {
            const metadata = JSON.parse(fs.readFileSync(this._metadataFile).toString());
            return metadata.v1[key];
        }
        else {
            return undefined;
        }
    }
    /**
     * Get cached user data script or obtain it if it doesn't exist
     */
    async _getUserDataScript() {
        if (!this._userDataScriptOnce) {
            this._userDataScriptOnce = this._getUserDataScriptNow();
        }
        return this._userDataScriptOnce;
    }
    /**
     * Obtain the user data script
     */
    _getUserDataScriptNow() {
        if (fs.existsSync(this._userDataFile)) {
            return fs.readFileSync(this._userDataFile).toString();
        }
        else {
            return undefined;
        }
    }
    /**
     * Get the data from user-data script
     */
    async _getUserDataNow(key) {
        const userDataScript = await this._getUserDataScript();
        if (!userDataScript) {
            return "";
        }
        return this._getParameterFromUserData(userDataScript, key);
    }
    /**
     * Remove cloud-init disks from an array of disk names
     */
    _filterCloudInitDisks(diskDeviceNames) {
        const diskByIdPath = "/dev/disk/by-id";
        const cloudInitDiskLinks = glob.sync(path.join(diskByIdPath, "*-cloud-init-*"));
        const cloudInitDisks = cloudInitDiskLinks.map((l) => path.join(diskByIdPath, fs.readlinkSync(l)));
        return diskDeviceNames.filter((d) => !cloudInitDisks.includes(d));
    }
}
exports.CloudInitCloud = CloudInitCloud;
